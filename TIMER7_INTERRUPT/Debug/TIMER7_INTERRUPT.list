
TIMER7_INTERRUPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cf4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001e7c  08001e7c  00011e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e8c  08001e8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001e8c  08001e8c  00011e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001e94  08001e94  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e94  08001e94  00011e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e98  08001e98  00011e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000068  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000074  20000074  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008df4  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000017d4  00000000  00000000  00028e73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000980  00000000  00000000  0002a648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000749  00000000  00000000  0002afc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fed1  00000000  00000000  0002b711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b001  00000000  00000000  0004b5e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4c28  00000000  00000000  000565e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000026d8  00000000  00000000  0011b20c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  0011d8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001e64 	.word	0x08001e64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001e64 	.word	0x08001e64

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 030c 	add.w	r3, r7, #12
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	60bb      	str	r3, [r7, #8]
 80004de:	4b20      	ldr	r3, [pc, #128]	; (8000560 <MX_GPIO_Init+0x9c>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a1f      	ldr	r2, [pc, #124]	; (8000560 <MX_GPIO_Init+0x9c>)
 80004e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
 80004ea:	4b1d      	ldr	r3, [pc, #116]	; (8000560 <MX_GPIO_Init+0x9c>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004f2:	60bb      	str	r3, [r7, #8]
 80004f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004f6:	2300      	movs	r3, #0
 80004f8:	607b      	str	r3, [r7, #4]
 80004fa:	4b19      	ldr	r3, [pc, #100]	; (8000560 <MX_GPIO_Init+0x9c>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	4a18      	ldr	r2, [pc, #96]	; (8000560 <MX_GPIO_Init+0x9c>)
 8000500:	f043 0308 	orr.w	r3, r3, #8
 8000504:	6313      	str	r3, [r2, #48]	; 0x30
 8000506:	4b16      	ldr	r3, [pc, #88]	; (8000560 <MX_GPIO_Init+0x9c>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	f003 0308 	and.w	r3, r3, #8
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	2300      	movs	r3, #0
 8000514:	603b      	str	r3, [r7, #0]
 8000516:	4b12      	ldr	r3, [pc, #72]	; (8000560 <MX_GPIO_Init+0x9c>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4a11      	ldr	r2, [pc, #68]	; (8000560 <MX_GPIO_Init+0x9c>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6313      	str	r3, [r2, #48]	; 0x30
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <MX_GPIO_Init+0x9c>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000534:	480b      	ldr	r0, [pc, #44]	; (8000564 <MX_GPIO_Init+0xa0>)
 8000536:	f000 fcb3 	bl	8000ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800053a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800053e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000540:	2301      	movs	r3, #1
 8000542:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	2300      	movs	r3, #0
 8000546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	2300      	movs	r3, #0
 800054a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	4619      	mov	r1, r3
 8000552:	4804      	ldr	r0, [pc, #16]	; (8000564 <MX_GPIO_Init+0xa0>)
 8000554:	f000 fb08 	bl	8000b68 <HAL_GPIO_Init>

}
 8000558:	bf00      	nop
 800055a:	3720      	adds	r7, #32
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40023800 	.word	0x40023800
 8000564:	40020c00 	.word	0x40020c00

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 f978 	bl	8000860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f80a 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f7ff ffa6 	bl	80004c4 <MX_GPIO_Init>
  MX_TIM7_Init();
 8000578:	f000 f8ea 	bl	8000750 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 800057c:	4801      	ldr	r0, [pc, #4]	; (8000584 <main+0x1c>)
 800057e:	f001 f977 	bl	8001870 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000582:	e7fe      	b.n	8000582 <main+0x1a>
 8000584:	20000028 	.word	0x20000028

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2230      	movs	r2, #48	; 0x30
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f001 fc38 	bl	8001e0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	4b28      	ldr	r3, [pc, #160]	; (8000654 <SystemClock_Config+0xcc>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a27      	ldr	r2, [pc, #156]	; (8000654 <SystemClock_Config+0xcc>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b25      	ldr	r3, [pc, #148]	; (8000654 <SystemClock_Config+0xcc>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <SystemClock_Config+0xd0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a21      	ldr	r2, [pc, #132]	; (8000658 <SystemClock_Config+0xd0>)
 80005d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <SystemClock_Config+0xd0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e4:	2301      	movs	r3, #1
 80005e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f8:	2304      	movs	r3, #4
 80005fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005fc:	23a8      	movs	r3, #168	; 0xa8
 80005fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000600:	2302      	movs	r3, #2
 8000602:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000604:	2304      	movs	r3, #4
 8000606:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	f107 0320 	add.w	r3, r7, #32
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fc7b 	bl	8000f08 <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000618:	f000 f820 	bl	800065c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	230f      	movs	r3, #15
 800061e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000620:	2302      	movs	r3, #2
 8000622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000628:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800062c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800062e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000632:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2105      	movs	r1, #5
 800063a:	4618      	mov	r0, r3
 800063c:	f000 fedc 	bl	80013f8 <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000646:	f000 f809 	bl	800065c <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	3750      	adds	r7, #80	; 0x50
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000660:	b672      	cpsid	i
}
 8000662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000664:	e7fe      	b.n	8000664 <Error_Handler+0x8>
	...

08000668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <HAL_MspInit+0x4c>)
 8000674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000676:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <HAL_MspInit+0x4c>)
 8000678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067c:	6453      	str	r3, [r2, #68]	; 0x44
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <HAL_MspInit+0x4c>)
 8000680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <HAL_MspInit+0x4c>)
 8000690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000692:	4a08      	ldr	r2, [pc, #32]	; (80006b4 <HAL_MspInit+0x4c>)
 8000694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000698:	6413      	str	r3, [r2, #64]	; 0x40
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <HAL_MspInit+0x4c>)
 800069c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a6:	bf00      	nop
 80006a8:	370c      	adds	r7, #12
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800

080006b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006bc:	e7fe      	b.n	80006bc <NMI_Handler+0x4>

080006be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <HardFault_Handler+0x4>

080006c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <MemManage_Handler+0x4>

080006ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <BusFault_Handler+0x4>

080006d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <UsageFault_Handler+0x4>

080006d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000704:	f000 f8fe 	bl	8000904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000710:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000714:	4803      	ldr	r0, [pc, #12]	; (8000724 <TIM7_IRQHandler+0x18>)
 8000716:	f000 fbdc 	bl	8000ed2 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800071a:	4803      	ldr	r0, [pc, #12]	; (8000728 <TIM7_IRQHandler+0x1c>)
 800071c:	f001 f918 	bl	8001950 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40020c00 	.word	0x40020c00
 8000728:	20000028 	.word	0x20000028

0800072c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <SystemInit+0x20>)
 8000732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000736:	4a05      	ldr	r2, [pc, #20]	; (800074c <SystemInit+0x20>)
 8000738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800073c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000756:	463b      	mov	r3, r7
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_TIM7_Init+0x64>)
 8000760:	4a15      	ldr	r2, [pc, #84]	; (80007b8 <MX_TIM7_Init+0x68>)
 8000762:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 42000-1;
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_TIM7_Init+0x64>)
 8000766:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800076a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_TIM7_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2000;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_TIM7_Init+0x64>)
 8000774:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000778:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_TIM7_Init+0x64>)
 800077c:	2280      	movs	r2, #128	; 0x80
 800077e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000780:	480c      	ldr	r0, [pc, #48]	; (80007b4 <MX_TIM7_Init+0x64>)
 8000782:	f001 f825 	bl	80017d0 <HAL_TIM_Base_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800078c:	f7ff ff66 	bl	800065c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000790:	2300      	movs	r3, #0
 8000792:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000798:	463b      	mov	r3, r7
 800079a:	4619      	mov	r1, r3
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_TIM7_Init+0x64>)
 800079e:	f001 faa5 	bl	8001cec <HAL_TIMEx_MasterConfigSynchronization>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80007a8:	f7ff ff58 	bl	800065c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000028 	.word	0x20000028
 80007b8:	40001400 	.word	0x40001400

080007bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <HAL_TIM_Base_MspInit+0x48>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d115      	bne.n	80007fa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <HAL_TIM_Base_MspInit+0x4c>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	4a0c      	ldr	r2, [pc, #48]	; (8000808 <HAL_TIM_Base_MspInit+0x4c>)
 80007d8:	f043 0320 	orr.w	r3, r3, #32
 80007dc:	6413      	str	r3, [r2, #64]	; 0x40
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <HAL_TIM_Base_MspInit+0x4c>)
 80007e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e2:	f003 0320 	and.w	r3, r3, #32
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	2037      	movs	r0, #55	; 0x37
 80007f0:	f000 f983 	bl	8000afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80007f4:	2037      	movs	r0, #55	; 0x37
 80007f6:	f000 f99c 	bl	8000b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80007fa:	bf00      	nop
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40001400 	.word	0x40001400
 8000808:	40023800 	.word	0x40023800

0800080c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800080c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000844 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000810:	f7ff ff8c 	bl	800072c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000816:	490d      	ldr	r1, [pc, #52]	; (800084c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000818:	4a0d      	ldr	r2, [pc, #52]	; (8000850 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800081c:	e002      	b.n	8000824 <LoopCopyDataInit>

0800081e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800081e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000822:	3304      	adds	r3, #4

08000824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000828:	d3f9      	bcc.n	800081e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800082c:	4c0a      	ldr	r4, [pc, #40]	; (8000858 <LoopFillZerobss+0x22>)
  movs r3, #0
 800082e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000830:	e001      	b.n	8000836 <LoopFillZerobss>

08000832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000834:	3204      	adds	r2, #4

08000836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000838:	d3fb      	bcc.n	8000832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800083a:	f001 faef 	bl	8001e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800083e:	f7ff fe93 	bl	8000568 <main>
  bx  lr    
 8000842:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000844:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800084c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000850:	08001e9c 	.word	0x08001e9c
  ldr r2, =_sbss
 8000854:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000858:	20000074 	.word	0x20000074

0800085c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800085c:	e7fe      	b.n	800085c <ADC_IRQHandler>
	...

08000860 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000864:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <HAL_Init+0x40>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a0d      	ldr	r2, [pc, #52]	; (80008a0 <HAL_Init+0x40>)
 800086a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800086e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000870:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <HAL_Init+0x40>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <HAL_Init+0x40>)
 8000876:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800087a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <HAL_Init+0x40>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <HAL_Init+0x40>)
 8000882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000886:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000888:	2003      	movs	r0, #3
 800088a:	f000 f92b 	bl	8000ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800088e:	200f      	movs	r0, #15
 8000890:	f000 f808 	bl	80008a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000894:	f7ff fee8 	bl	8000668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023c00 	.word	0x40023c00

080008a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <HAL_InitTick+0x54>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_InitTick+0x58>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4619      	mov	r1, r3
 80008b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80008be:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 f943 	bl	8000b4e <HAL_SYSTICK_Config>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e00e      	b.n	80008f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d80a      	bhi.n	80008ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d8:	2200      	movs	r2, #0
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	f04f 30ff 	mov.w	r0, #4294967295
 80008e0:	f000 f90b 	bl	8000afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e4:	4a06      	ldr	r2, [pc, #24]	; (8000900 <HAL_InitTick+0x5c>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ea:	2300      	movs	r3, #0
 80008ec:	e000      	b.n	80008f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000000 	.word	0x20000000
 80008fc:	20000008 	.word	0x20000008
 8000900:	20000004 	.word	0x20000004

08000904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <HAL_IncTick+0x20>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_IncTick+0x24>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4413      	add	r3, r2
 8000914:	4a04      	ldr	r2, [pc, #16]	; (8000928 <HAL_IncTick+0x24>)
 8000916:	6013      	str	r3, [r2, #0]
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	20000008 	.word	0x20000008
 8000928:	20000070 	.word	0x20000070

0800092c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return uwTick;
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <HAL_GetTick+0x14>)
 8000932:	681b      	ldr	r3, [r3, #0]
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000070 	.word	0x20000070

08000944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095a:	68ba      	ldr	r2, [r7, #8]
 800095c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000960:	4013      	ands	r3, r2
 8000962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800096c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000976:	4a04      	ldr	r2, [pc, #16]	; (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	60d3      	str	r3, [r2, #12]
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	f003 0307 	and.w	r3, r3, #7
}
 800099a:	4618      	mov	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	db0b      	blt.n	80009d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	f003 021f 	and.w	r2, r3, #31
 80009c0:	4907      	ldr	r1, [pc, #28]	; (80009e0 <__NVIC_EnableIRQ+0x38>)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	095b      	lsrs	r3, r3, #5
 80009c8:	2001      	movs	r0, #1
 80009ca:	fa00 f202 	lsl.w	r2, r0, r2
 80009ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000e100 	.word	0xe000e100

080009e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	6039      	str	r1, [r7, #0]
 80009ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	db0a      	blt.n	8000a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	490c      	ldr	r1, [pc, #48]	; (8000a30 <__NVIC_SetPriority+0x4c>)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	0112      	lsls	r2, r2, #4
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	440b      	add	r3, r1
 8000a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a0c:	e00a      	b.n	8000a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4908      	ldr	r1, [pc, #32]	; (8000a34 <__NVIC_SetPriority+0x50>)
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	f003 030f 	and.w	r3, r3, #15
 8000a1a:	3b04      	subs	r3, #4
 8000a1c:	0112      	lsls	r2, r2, #4
 8000a1e:	b2d2      	uxtb	r2, r2
 8000a20:	440b      	add	r3, r1
 8000a22:	761a      	strb	r2, [r3, #24]
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000e100 	.word	0xe000e100
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b089      	sub	sp, #36	; 0x24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	f003 0307 	and.w	r3, r3, #7
 8000a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	f1c3 0307 	rsb	r3, r3, #7
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	bf28      	it	cs
 8000a56:	2304      	movcs	r3, #4
 8000a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3304      	adds	r3, #4
 8000a5e:	2b06      	cmp	r3, #6
 8000a60:	d902      	bls.n	8000a68 <NVIC_EncodePriority+0x30>
 8000a62:	69fb      	ldr	r3, [r7, #28]
 8000a64:	3b03      	subs	r3, #3
 8000a66:	e000      	b.n	8000a6a <NVIC_EncodePriority+0x32>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	43da      	mvns	r2, r3
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a80:	f04f 31ff 	mov.w	r1, #4294967295
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8a:	43d9      	mvns	r1, r3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a90:	4313      	orrs	r3, r2
         );
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3724      	adds	r7, #36	; 0x24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
	...

08000aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ab0:	d301      	bcc.n	8000ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00f      	b.n	8000ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <SysTick_Config+0x40>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000abe:	210f      	movs	r1, #15
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f7ff ff8e 	bl	80009e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <SysTick_Config+0x40>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <SysTick_Config+0x40>)
 8000ad0:	2207      	movs	r2, #7
 8000ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	e000e010 	.word	0xe000e010

08000ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ff29 	bl	8000944 <__NVIC_SetPriorityGrouping>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b0c:	f7ff ff3e 	bl	800098c <__NVIC_GetPriorityGrouping>
 8000b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	68b9      	ldr	r1, [r7, #8]
 8000b16:	6978      	ldr	r0, [r7, #20]
 8000b18:	f7ff ff8e 	bl	8000a38 <NVIC_EncodePriority>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff5d 	bl	80009e4 <__NVIC_SetPriority>
}
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff31 	bl	80009a8 <__NVIC_EnableIRQ>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ffa2 	bl	8000aa0 <SysTick_Config>
 8000b5c:	4603      	mov	r3, r0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b089      	sub	sp, #36	; 0x24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
 8000b82:	e16b      	b.n	8000e5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b84:	2201      	movs	r2, #1
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	697a      	ldr	r2, [r7, #20]
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	f040 815a 	bne.w	8000e56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f003 0303 	and.w	r3, r3, #3
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d005      	beq.n	8000bba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d130      	bne.n	8000c1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	68da      	ldr	r2, [r3, #12]
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	69ba      	ldr	r2, [r7, #24]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	69ba      	ldr	r2, [r7, #24]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	091b      	lsrs	r3, r3, #4
 8000c06:	f003 0201 	and.w	r2, r3, #1
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	2b03      	cmp	r3, #3
 8000c26:	d017      	beq.n	8000c58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	2203      	movs	r2, #3
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	689a      	ldr	r2, [r3, #8]
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f003 0303 	and.w	r3, r3, #3
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d123      	bne.n	8000cac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	08da      	lsrs	r2, r3, #3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3208      	adds	r2, #8
 8000c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	f003 0307 	and.w	r3, r3, #7
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	220f      	movs	r2, #15
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4013      	ands	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	691a      	ldr	r2, [r3, #16]
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	08da      	lsrs	r2, r3, #3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3208      	adds	r2, #8
 8000ca6:	69b9      	ldr	r1, [r7, #24]
 8000ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 0203 	and.w	r2, r3, #3
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f000 80b4 	beq.w	8000e56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b60      	ldr	r3, [pc, #384]	; (8000e74 <HAL_GPIO_Init+0x30c>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	4a5f      	ldr	r2, [pc, #380]	; (8000e74 <HAL_GPIO_Init+0x30c>)
 8000cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfe:	4b5d      	ldr	r3, [pc, #372]	; (8000e74 <HAL_GPIO_Init+0x30c>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d0a:	4a5b      	ldr	r2, [pc, #364]	; (8000e78 <HAL_GPIO_Init+0x310>)
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	089b      	lsrs	r3, r3, #2
 8000d10:	3302      	adds	r3, #2
 8000d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f003 0303 	and.w	r3, r3, #3
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	220f      	movs	r2, #15
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a52      	ldr	r2, [pc, #328]	; (8000e7c <HAL_GPIO_Init+0x314>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d02b      	beq.n	8000d8e <HAL_GPIO_Init+0x226>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a51      	ldr	r2, [pc, #324]	; (8000e80 <HAL_GPIO_Init+0x318>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d025      	beq.n	8000d8a <HAL_GPIO_Init+0x222>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a50      	ldr	r2, [pc, #320]	; (8000e84 <HAL_GPIO_Init+0x31c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d01f      	beq.n	8000d86 <HAL_GPIO_Init+0x21e>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a4f      	ldr	r2, [pc, #316]	; (8000e88 <HAL_GPIO_Init+0x320>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d019      	beq.n	8000d82 <HAL_GPIO_Init+0x21a>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a4e      	ldr	r2, [pc, #312]	; (8000e8c <HAL_GPIO_Init+0x324>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d013      	beq.n	8000d7e <HAL_GPIO_Init+0x216>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a4d      	ldr	r2, [pc, #308]	; (8000e90 <HAL_GPIO_Init+0x328>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d00d      	beq.n	8000d7a <HAL_GPIO_Init+0x212>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a4c      	ldr	r2, [pc, #304]	; (8000e94 <HAL_GPIO_Init+0x32c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d007      	beq.n	8000d76 <HAL_GPIO_Init+0x20e>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a4b      	ldr	r2, [pc, #300]	; (8000e98 <HAL_GPIO_Init+0x330>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d101      	bne.n	8000d72 <HAL_GPIO_Init+0x20a>
 8000d6e:	2307      	movs	r3, #7
 8000d70:	e00e      	b.n	8000d90 <HAL_GPIO_Init+0x228>
 8000d72:	2308      	movs	r3, #8
 8000d74:	e00c      	b.n	8000d90 <HAL_GPIO_Init+0x228>
 8000d76:	2306      	movs	r3, #6
 8000d78:	e00a      	b.n	8000d90 <HAL_GPIO_Init+0x228>
 8000d7a:	2305      	movs	r3, #5
 8000d7c:	e008      	b.n	8000d90 <HAL_GPIO_Init+0x228>
 8000d7e:	2304      	movs	r3, #4
 8000d80:	e006      	b.n	8000d90 <HAL_GPIO_Init+0x228>
 8000d82:	2303      	movs	r3, #3
 8000d84:	e004      	b.n	8000d90 <HAL_GPIO_Init+0x228>
 8000d86:	2302      	movs	r3, #2
 8000d88:	e002      	b.n	8000d90 <HAL_GPIO_Init+0x228>
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e000      	b.n	8000d90 <HAL_GPIO_Init+0x228>
 8000d8e:	2300      	movs	r3, #0
 8000d90:	69fa      	ldr	r2, [r7, #28]
 8000d92:	f002 0203 	and.w	r2, r2, #3
 8000d96:	0092      	lsls	r2, r2, #2
 8000d98:	4093      	lsls	r3, r2
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000da0:	4935      	ldr	r1, [pc, #212]	; (8000e78 <HAL_GPIO_Init+0x310>)
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	089b      	lsrs	r3, r3, #2
 8000da6:	3302      	adds	r3, #2
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dae:	4b3b      	ldr	r3, [pc, #236]	; (8000e9c <HAL_GPIO_Init+0x334>)
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	43db      	mvns	r3, r3
 8000db8:	69ba      	ldr	r2, [r7, #24]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dd2:	4a32      	ldr	r2, [pc, #200]	; (8000e9c <HAL_GPIO_Init+0x334>)
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dd8:	4b30      	ldr	r3, [pc, #192]	; (8000e9c <HAL_GPIO_Init+0x334>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dfc:	4a27      	ldr	r2, [pc, #156]	; (8000e9c <HAL_GPIO_Init+0x334>)
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e02:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <HAL_GPIO_Init+0x334>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e26:	4a1d      	ldr	r2, [pc, #116]	; (8000e9c <HAL_GPIO_Init+0x334>)
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <HAL_GPIO_Init+0x334>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e50:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <HAL_GPIO_Init+0x334>)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	61fb      	str	r3, [r7, #28]
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	2b0f      	cmp	r3, #15
 8000e60:	f67f ae90 	bls.w	8000b84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	3724      	adds	r7, #36	; 0x24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40013800 	.word	0x40013800
 8000e7c:	40020000 	.word	0x40020000
 8000e80:	40020400 	.word	0x40020400
 8000e84:	40020800 	.word	0x40020800
 8000e88:	40020c00 	.word	0x40020c00
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40021400 	.word	0x40021400
 8000e94:	40021800 	.word	0x40021800
 8000e98:	40021c00 	.word	0x40021c00
 8000e9c:	40013c00 	.word	0x40013c00

08000ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	807b      	strh	r3, [r7, #2]
 8000eac:	4613      	mov	r3, r2
 8000eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000eb0:	787b      	ldrb	r3, [r7, #1]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eb6:	887a      	ldrh	r2, [r7, #2]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ebc:	e003      	b.n	8000ec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ebe:	887b      	ldrh	r3, [r7, #2]
 8000ec0:	041a      	lsls	r2, r3, #16
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	619a      	str	r2, [r3, #24]
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b085      	sub	sp, #20
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	460b      	mov	r3, r1
 8000edc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ee4:	887a      	ldrh	r2, [r7, #2]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	041a      	lsls	r2, r3, #16
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	43d9      	mvns	r1, r3
 8000ef0:	887b      	ldrh	r3, [r7, #2]
 8000ef2:	400b      	ands	r3, r1
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	619a      	str	r2, [r3, #24]
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d101      	bne.n	8000f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e267      	b.n	80013ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d075      	beq.n	8001012 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f26:	4b88      	ldr	r3, [pc, #544]	; (8001148 <HAL_RCC_OscConfig+0x240>)
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f003 030c 	and.w	r3, r3, #12
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	d00c      	beq.n	8000f4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f32:	4b85      	ldr	r3, [pc, #532]	; (8001148 <HAL_RCC_OscConfig+0x240>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f3a:	2b08      	cmp	r3, #8
 8000f3c:	d112      	bne.n	8000f64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f3e:	4b82      	ldr	r3, [pc, #520]	; (8001148 <HAL_RCC_OscConfig+0x240>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f4a:	d10b      	bne.n	8000f64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f4c:	4b7e      	ldr	r3, [pc, #504]	; (8001148 <HAL_RCC_OscConfig+0x240>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d05b      	beq.n	8001010 <HAL_RCC_OscConfig+0x108>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d157      	bne.n	8001010 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e242      	b.n	80013ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f6c:	d106      	bne.n	8000f7c <HAL_RCC_OscConfig+0x74>
 8000f6e:	4b76      	ldr	r3, [pc, #472]	; (8001148 <HAL_RCC_OscConfig+0x240>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a75      	ldr	r2, [pc, #468]	; (8001148 <HAL_RCC_OscConfig+0x240>)
 8000f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	e01d      	b.n	8000fb8 <HAL_RCC_OscConfig+0xb0>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f84:	d10c      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x98>
 8000f86:	4b70      	ldr	r3, [pc, #448]	; (8001148 <HAL_RCC_OscConfig+0x240>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a6f      	ldr	r2, [pc, #444]	; (8001148 <HAL_RCC_OscConfig+0x240>)
 8000f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f90:	6013      	str	r3, [r2, #0]
 8000f92:	4b6d      	ldr	r3, [pc, #436]	; (8001148 <HAL_RCC_OscConfig+0x240>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a6c      	ldr	r2, [pc, #432]	; (8001148 <HAL_RCC_OscConfig+0x240>)
 8000f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	e00b      	b.n	8000fb8 <HAL_RCC_OscConfig+0xb0>
 8000fa0:	4b69      	ldr	r3, [pc, #420]	; (8001148 <HAL_RCC_OscConfig+0x240>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a68      	ldr	r2, [pc, #416]	; (8001148 <HAL_RCC_OscConfig+0x240>)
 8000fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b66      	ldr	r3, [pc, #408]	; (8001148 <HAL_RCC_OscConfig+0x240>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a65      	ldr	r2, [pc, #404]	; (8001148 <HAL_RCC_OscConfig+0x240>)
 8000fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d013      	beq.n	8000fe8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fcb4 	bl	800092c <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fc8:	f7ff fcb0 	bl	800092c <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b64      	cmp	r3, #100	; 0x64
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e207      	b.n	80013ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fda:	4b5b      	ldr	r3, [pc, #364]	; (8001148 <HAL_RCC_OscConfig+0x240>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0f0      	beq.n	8000fc8 <HAL_RCC_OscConfig+0xc0>
 8000fe6:	e014      	b.n	8001012 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fca0 	bl	800092c <HAL_GetTick>
 8000fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fee:	e008      	b.n	8001002 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff0:	f7ff fc9c 	bl	800092c <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b64      	cmp	r3, #100	; 0x64
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e1f3      	b.n	80013ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001002:	4b51      	ldr	r3, [pc, #324]	; (8001148 <HAL_RCC_OscConfig+0x240>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f0      	bne.n	8000ff0 <HAL_RCC_OscConfig+0xe8>
 800100e:	e000      	b.n	8001012 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d063      	beq.n	80010e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800101e:	4b4a      	ldr	r3, [pc, #296]	; (8001148 <HAL_RCC_OscConfig+0x240>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f003 030c 	and.w	r3, r3, #12
 8001026:	2b00      	cmp	r3, #0
 8001028:	d00b      	beq.n	8001042 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800102a:	4b47      	ldr	r3, [pc, #284]	; (8001148 <HAL_RCC_OscConfig+0x240>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001032:	2b08      	cmp	r3, #8
 8001034:	d11c      	bne.n	8001070 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001036:	4b44      	ldr	r3, [pc, #272]	; (8001148 <HAL_RCC_OscConfig+0x240>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d116      	bne.n	8001070 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001042:	4b41      	ldr	r3, [pc, #260]	; (8001148 <HAL_RCC_OscConfig+0x240>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d005      	beq.n	800105a <HAL_RCC_OscConfig+0x152>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d001      	beq.n	800105a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e1c7      	b.n	80013ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105a:	4b3b      	ldr	r3, [pc, #236]	; (8001148 <HAL_RCC_OscConfig+0x240>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	4937      	ldr	r1, [pc, #220]	; (8001148 <HAL_RCC_OscConfig+0x240>)
 800106a:	4313      	orrs	r3, r2
 800106c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800106e:	e03a      	b.n	80010e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d020      	beq.n	80010ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001078:	4b34      	ldr	r3, [pc, #208]	; (800114c <HAL_RCC_OscConfig+0x244>)
 800107a:	2201      	movs	r2, #1
 800107c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800107e:	f7ff fc55 	bl	800092c <HAL_GetTick>
 8001082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001084:	e008      	b.n	8001098 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001086:	f7ff fc51 	bl	800092c <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d901      	bls.n	8001098 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e1a8      	b.n	80013ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001098:	4b2b      	ldr	r3, [pc, #172]	; (8001148 <HAL_RCC_OscConfig+0x240>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0f0      	beq.n	8001086 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a4:	4b28      	ldr	r3, [pc, #160]	; (8001148 <HAL_RCC_OscConfig+0x240>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	4925      	ldr	r1, [pc, #148]	; (8001148 <HAL_RCC_OscConfig+0x240>)
 80010b4:	4313      	orrs	r3, r2
 80010b6:	600b      	str	r3, [r1, #0]
 80010b8:	e015      	b.n	80010e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ba:	4b24      	ldr	r3, [pc, #144]	; (800114c <HAL_RCC_OscConfig+0x244>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c0:	f7ff fc34 	bl	800092c <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010c8:	f7ff fc30 	bl	800092c <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e187      	b.n	80013ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <HAL_RCC_OscConfig+0x240>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f0      	bne.n	80010c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d036      	beq.n	8001160 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d016      	beq.n	8001128 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <HAL_RCC_OscConfig+0x248>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001100:	f7ff fc14 	bl	800092c <HAL_GetTick>
 8001104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001108:	f7ff fc10 	bl	800092c <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e167      	b.n	80013ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <HAL_RCC_OscConfig+0x240>)
 800111c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0f0      	beq.n	8001108 <HAL_RCC_OscConfig+0x200>
 8001126:	e01b      	b.n	8001160 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <HAL_RCC_OscConfig+0x248>)
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112e:	f7ff fbfd 	bl	800092c <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001134:	e00e      	b.n	8001154 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001136:	f7ff fbf9 	bl	800092c <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d907      	bls.n	8001154 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e150      	b.n	80013ea <HAL_RCC_OscConfig+0x4e2>
 8001148:	40023800 	.word	0x40023800
 800114c:	42470000 	.word	0x42470000
 8001150:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001154:	4b88      	ldr	r3, [pc, #544]	; (8001378 <HAL_RCC_OscConfig+0x470>)
 8001156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1ea      	bne.n	8001136 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	2b00      	cmp	r3, #0
 800116a:	f000 8097 	beq.w	800129c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800116e:	2300      	movs	r3, #0
 8001170:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001172:	4b81      	ldr	r3, [pc, #516]	; (8001378 <HAL_RCC_OscConfig+0x470>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10f      	bne.n	800119e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	4b7d      	ldr	r3, [pc, #500]	; (8001378 <HAL_RCC_OscConfig+0x470>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	4a7c      	ldr	r2, [pc, #496]	; (8001378 <HAL_RCC_OscConfig+0x470>)
 8001188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118c:	6413      	str	r3, [r2, #64]	; 0x40
 800118e:	4b7a      	ldr	r3, [pc, #488]	; (8001378 <HAL_RCC_OscConfig+0x470>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800119a:	2301      	movs	r3, #1
 800119c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800119e:	4b77      	ldr	r3, [pc, #476]	; (800137c <HAL_RCC_OscConfig+0x474>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d118      	bne.n	80011dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011aa:	4b74      	ldr	r3, [pc, #464]	; (800137c <HAL_RCC_OscConfig+0x474>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a73      	ldr	r2, [pc, #460]	; (800137c <HAL_RCC_OscConfig+0x474>)
 80011b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011b6:	f7ff fbb9 	bl	800092c <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011bc:	e008      	b.n	80011d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011be:	f7ff fbb5 	bl	800092c <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e10c      	b.n	80013ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d0:	4b6a      	ldr	r3, [pc, #424]	; (800137c <HAL_RCC_OscConfig+0x474>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0f0      	beq.n	80011be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d106      	bne.n	80011f2 <HAL_RCC_OscConfig+0x2ea>
 80011e4:	4b64      	ldr	r3, [pc, #400]	; (8001378 <HAL_RCC_OscConfig+0x470>)
 80011e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e8:	4a63      	ldr	r2, [pc, #396]	; (8001378 <HAL_RCC_OscConfig+0x470>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6713      	str	r3, [r2, #112]	; 0x70
 80011f0:	e01c      	b.n	800122c <HAL_RCC_OscConfig+0x324>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2b05      	cmp	r3, #5
 80011f8:	d10c      	bne.n	8001214 <HAL_RCC_OscConfig+0x30c>
 80011fa:	4b5f      	ldr	r3, [pc, #380]	; (8001378 <HAL_RCC_OscConfig+0x470>)
 80011fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011fe:	4a5e      	ldr	r2, [pc, #376]	; (8001378 <HAL_RCC_OscConfig+0x470>)
 8001200:	f043 0304 	orr.w	r3, r3, #4
 8001204:	6713      	str	r3, [r2, #112]	; 0x70
 8001206:	4b5c      	ldr	r3, [pc, #368]	; (8001378 <HAL_RCC_OscConfig+0x470>)
 8001208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800120a:	4a5b      	ldr	r2, [pc, #364]	; (8001378 <HAL_RCC_OscConfig+0x470>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6713      	str	r3, [r2, #112]	; 0x70
 8001212:	e00b      	b.n	800122c <HAL_RCC_OscConfig+0x324>
 8001214:	4b58      	ldr	r3, [pc, #352]	; (8001378 <HAL_RCC_OscConfig+0x470>)
 8001216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001218:	4a57      	ldr	r2, [pc, #348]	; (8001378 <HAL_RCC_OscConfig+0x470>)
 800121a:	f023 0301 	bic.w	r3, r3, #1
 800121e:	6713      	str	r3, [r2, #112]	; 0x70
 8001220:	4b55      	ldr	r3, [pc, #340]	; (8001378 <HAL_RCC_OscConfig+0x470>)
 8001222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001224:	4a54      	ldr	r2, [pc, #336]	; (8001378 <HAL_RCC_OscConfig+0x470>)
 8001226:	f023 0304 	bic.w	r3, r3, #4
 800122a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d015      	beq.n	8001260 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001234:	f7ff fb7a 	bl	800092c <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800123a:	e00a      	b.n	8001252 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800123c:	f7ff fb76 	bl	800092c <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	f241 3288 	movw	r2, #5000	; 0x1388
 800124a:	4293      	cmp	r3, r2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e0cb      	b.n	80013ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001252:	4b49      	ldr	r3, [pc, #292]	; (8001378 <HAL_RCC_OscConfig+0x470>)
 8001254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d0ee      	beq.n	800123c <HAL_RCC_OscConfig+0x334>
 800125e:	e014      	b.n	800128a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001260:	f7ff fb64 	bl	800092c <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001266:	e00a      	b.n	800127e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001268:	f7ff fb60 	bl	800092c <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	f241 3288 	movw	r2, #5000	; 0x1388
 8001276:	4293      	cmp	r3, r2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e0b5      	b.n	80013ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800127e:	4b3e      	ldr	r3, [pc, #248]	; (8001378 <HAL_RCC_OscConfig+0x470>)
 8001280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1ee      	bne.n	8001268 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800128a:	7dfb      	ldrb	r3, [r7, #23]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d105      	bne.n	800129c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001290:	4b39      	ldr	r3, [pc, #228]	; (8001378 <HAL_RCC_OscConfig+0x470>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	4a38      	ldr	r2, [pc, #224]	; (8001378 <HAL_RCC_OscConfig+0x470>)
 8001296:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800129a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 80a1 	beq.w	80013e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012a6:	4b34      	ldr	r3, [pc, #208]	; (8001378 <HAL_RCC_OscConfig+0x470>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b08      	cmp	r3, #8
 80012b0:	d05c      	beq.n	800136c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d141      	bne.n	800133e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ba:	4b31      	ldr	r3, [pc, #196]	; (8001380 <HAL_RCC_OscConfig+0x478>)
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fb34 	bl	800092c <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012c8:	f7ff fb30 	bl	800092c <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e087      	b.n	80013ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012da:	4b27      	ldr	r3, [pc, #156]	; (8001378 <HAL_RCC_OscConfig+0x470>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f0      	bne.n	80012c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69da      	ldr	r2, [r3, #28]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a1b      	ldr	r3, [r3, #32]
 80012ee:	431a      	orrs	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f4:	019b      	lsls	r3, r3, #6
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fc:	085b      	lsrs	r3, r3, #1
 80012fe:	3b01      	subs	r3, #1
 8001300:	041b      	lsls	r3, r3, #16
 8001302:	431a      	orrs	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001308:	061b      	lsls	r3, r3, #24
 800130a:	491b      	ldr	r1, [pc, #108]	; (8001378 <HAL_RCC_OscConfig+0x470>)
 800130c:	4313      	orrs	r3, r2
 800130e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001310:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <HAL_RCC_OscConfig+0x478>)
 8001312:	2201      	movs	r2, #1
 8001314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001316:	f7ff fb09 	bl	800092c <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800131e:	f7ff fb05 	bl	800092c <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e05c      	b.n	80013ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <HAL_RCC_OscConfig+0x470>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0f0      	beq.n	800131e <HAL_RCC_OscConfig+0x416>
 800133c:	e054      	b.n	80013e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <HAL_RCC_OscConfig+0x478>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001344:	f7ff faf2 	bl	800092c <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800134c:	f7ff faee 	bl	800092c <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e045      	b.n	80013ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_RCC_OscConfig+0x470>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f0      	bne.n	800134c <HAL_RCC_OscConfig+0x444>
 800136a:	e03d      	b.n	80013e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d107      	bne.n	8001384 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e038      	b.n	80013ea <HAL_RCC_OscConfig+0x4e2>
 8001378:	40023800 	.word	0x40023800
 800137c:	40007000 	.word	0x40007000
 8001380:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001384:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <HAL_RCC_OscConfig+0x4ec>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d028      	beq.n	80013e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800139c:	429a      	cmp	r2, r3
 800139e:	d121      	bne.n	80013e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d11a      	bne.n	80013e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013b4:	4013      	ands	r3, r2
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013bc:	4293      	cmp	r3, r2
 80013be:	d111      	bne.n	80013e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ca:	085b      	lsrs	r3, r3, #1
 80013cc:	3b01      	subs	r3, #1
 80013ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d107      	bne.n	80013e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d001      	beq.n	80013e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e000      	b.n	80013ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800

080013f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e0cc      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800140c:	4b68      	ldr	r3, [pc, #416]	; (80015b0 <HAL_RCC_ClockConfig+0x1b8>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	429a      	cmp	r2, r3
 8001418:	d90c      	bls.n	8001434 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800141a:	4b65      	ldr	r3, [pc, #404]	; (80015b0 <HAL_RCC_ClockConfig+0x1b8>)
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001422:	4b63      	ldr	r3, [pc, #396]	; (80015b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	429a      	cmp	r2, r3
 800142e:	d001      	beq.n	8001434 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e0b8      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d020      	beq.n	8001482 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	2b00      	cmp	r3, #0
 800144a:	d005      	beq.n	8001458 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800144c:	4b59      	ldr	r3, [pc, #356]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	4a58      	ldr	r2, [pc, #352]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001452:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001456:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0308 	and.w	r3, r3, #8
 8001460:	2b00      	cmp	r3, #0
 8001462:	d005      	beq.n	8001470 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001464:	4b53      	ldr	r3, [pc, #332]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	4a52      	ldr	r2, [pc, #328]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 800146a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800146e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001470:	4b50      	ldr	r3, [pc, #320]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	494d      	ldr	r1, [pc, #308]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 800147e:	4313      	orrs	r3, r2
 8001480:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d044      	beq.n	8001518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d107      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001496:	4b47      	ldr	r3, [pc, #284]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d119      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e07f      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d003      	beq.n	80014b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d107      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b6:	4b3f      	ldr	r3, [pc, #252]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d109      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e06f      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c6:	4b3b      	ldr	r3, [pc, #236]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e067      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014d6:	4b37      	ldr	r3, [pc, #220]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f023 0203 	bic.w	r2, r3, #3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	4934      	ldr	r1, [pc, #208]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014e8:	f7ff fa20 	bl	800092c <HAL_GetTick>
 80014ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ee:	e00a      	b.n	8001506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f0:	f7ff fa1c 	bl	800092c <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fe:	4293      	cmp	r3, r2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e04f      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001506:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 020c 	and.w	r2, r3, #12
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	429a      	cmp	r2, r3
 8001516:	d1eb      	bne.n	80014f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001518:	4b25      	ldr	r3, [pc, #148]	; (80015b0 <HAL_RCC_ClockConfig+0x1b8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d20c      	bcs.n	8001540 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001526:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	429a      	cmp	r2, r3
 800153a:	d001      	beq.n	8001540 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e032      	b.n	80015a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	d008      	beq.n	800155e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800154c:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	4916      	ldr	r1, [pc, #88]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	4313      	orrs	r3, r2
 800155c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b00      	cmp	r3, #0
 8001568:	d009      	beq.n	800157e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	490e      	ldr	r1, [pc, #56]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 800157a:	4313      	orrs	r3, r2
 800157c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800157e:	f000 f821 	bl	80015c4 <HAL_RCC_GetSysClockFreq>
 8001582:	4602      	mov	r2, r0
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <HAL_RCC_ClockConfig+0x1bc>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	091b      	lsrs	r3, r3, #4
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	490a      	ldr	r1, [pc, #40]	; (80015b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001590:	5ccb      	ldrb	r3, [r1, r3]
 8001592:	fa22 f303 	lsr.w	r3, r2, r3
 8001596:	4a09      	ldr	r2, [pc, #36]	; (80015bc <HAL_RCC_ClockConfig+0x1c4>)
 8001598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <HAL_RCC_ClockConfig+0x1c8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff f980 	bl	80008a4 <HAL_InitTick>

  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023c00 	.word	0x40023c00
 80015b4:	40023800 	.word	0x40023800
 80015b8:	08001e7c 	.word	0x08001e7c
 80015bc:	20000000 	.word	0x20000000
 80015c0:	20000004 	.word	0x20000004

080015c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015c8:	b094      	sub	sp, #80	; 0x50
 80015ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	647b      	str	r3, [r7, #68]	; 0x44
 80015d0:	2300      	movs	r3, #0
 80015d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015d4:	2300      	movs	r3, #0
 80015d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015dc:	4b79      	ldr	r3, [pc, #484]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 030c 	and.w	r3, r3, #12
 80015e4:	2b08      	cmp	r3, #8
 80015e6:	d00d      	beq.n	8001604 <HAL_RCC_GetSysClockFreq+0x40>
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	f200 80e1 	bhi.w	80017b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d002      	beq.n	80015f8 <HAL_RCC_GetSysClockFreq+0x34>
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	d003      	beq.n	80015fe <HAL_RCC_GetSysClockFreq+0x3a>
 80015f6:	e0db      	b.n	80017b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015f8:	4b73      	ldr	r3, [pc, #460]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80015fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80015fc:	e0db      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015fe:	4b73      	ldr	r3, [pc, #460]	; (80017cc <HAL_RCC_GetSysClockFreq+0x208>)
 8001600:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001602:	e0d8      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001604:	4b6f      	ldr	r3, [pc, #444]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800160c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800160e:	4b6d      	ldr	r3, [pc, #436]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d063      	beq.n	80016e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800161a:	4b6a      	ldr	r3, [pc, #424]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	099b      	lsrs	r3, r3, #6
 8001620:	2200      	movs	r2, #0
 8001622:	63bb      	str	r3, [r7, #56]	; 0x38
 8001624:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800162c:	633b      	str	r3, [r7, #48]	; 0x30
 800162e:	2300      	movs	r3, #0
 8001630:	637b      	str	r3, [r7, #52]	; 0x34
 8001632:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001636:	4622      	mov	r2, r4
 8001638:	462b      	mov	r3, r5
 800163a:	f04f 0000 	mov.w	r0, #0
 800163e:	f04f 0100 	mov.w	r1, #0
 8001642:	0159      	lsls	r1, r3, #5
 8001644:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001648:	0150      	lsls	r0, r2, #5
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4621      	mov	r1, r4
 8001650:	1a51      	subs	r1, r2, r1
 8001652:	6139      	str	r1, [r7, #16]
 8001654:	4629      	mov	r1, r5
 8001656:	eb63 0301 	sbc.w	r3, r3, r1
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	f04f 0300 	mov.w	r3, #0
 8001664:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001668:	4659      	mov	r1, fp
 800166a:	018b      	lsls	r3, r1, #6
 800166c:	4651      	mov	r1, sl
 800166e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001672:	4651      	mov	r1, sl
 8001674:	018a      	lsls	r2, r1, #6
 8001676:	4651      	mov	r1, sl
 8001678:	ebb2 0801 	subs.w	r8, r2, r1
 800167c:	4659      	mov	r1, fp
 800167e:	eb63 0901 	sbc.w	r9, r3, r1
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800168e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001692:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001696:	4690      	mov	r8, r2
 8001698:	4699      	mov	r9, r3
 800169a:	4623      	mov	r3, r4
 800169c:	eb18 0303 	adds.w	r3, r8, r3
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	462b      	mov	r3, r5
 80016a4:	eb49 0303 	adc.w	r3, r9, r3
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80016b6:	4629      	mov	r1, r5
 80016b8:	024b      	lsls	r3, r1, #9
 80016ba:	4621      	mov	r1, r4
 80016bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016c0:	4621      	mov	r1, r4
 80016c2:	024a      	lsls	r2, r1, #9
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016ca:	2200      	movs	r2, #0
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80016ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80016d4:	f7fe fd78 	bl	80001c8 <__aeabi_uldivmod>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4613      	mov	r3, r2
 80016de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016e0:	e058      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016e2:	4b38      	ldr	r3, [pc, #224]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	099b      	lsrs	r3, r3, #6
 80016e8:	2200      	movs	r2, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	4611      	mov	r1, r2
 80016ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016f2:	623b      	str	r3, [r7, #32]
 80016f4:	2300      	movs	r3, #0
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
 80016f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80016fc:	4642      	mov	r2, r8
 80016fe:	464b      	mov	r3, r9
 8001700:	f04f 0000 	mov.w	r0, #0
 8001704:	f04f 0100 	mov.w	r1, #0
 8001708:	0159      	lsls	r1, r3, #5
 800170a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800170e:	0150      	lsls	r0, r2, #5
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4641      	mov	r1, r8
 8001716:	ebb2 0a01 	subs.w	sl, r2, r1
 800171a:	4649      	mov	r1, r9
 800171c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	f04f 0300 	mov.w	r3, #0
 8001728:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800172c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001730:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001734:	ebb2 040a 	subs.w	r4, r2, sl
 8001738:	eb63 050b 	sbc.w	r5, r3, fp
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	00eb      	lsls	r3, r5, #3
 8001746:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800174a:	00e2      	lsls	r2, r4, #3
 800174c:	4614      	mov	r4, r2
 800174e:	461d      	mov	r5, r3
 8001750:	4643      	mov	r3, r8
 8001752:	18e3      	adds	r3, r4, r3
 8001754:	603b      	str	r3, [r7, #0]
 8001756:	464b      	mov	r3, r9
 8001758:	eb45 0303 	adc.w	r3, r5, r3
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	e9d7 4500 	ldrd	r4, r5, [r7]
 800176a:	4629      	mov	r1, r5
 800176c:	028b      	lsls	r3, r1, #10
 800176e:	4621      	mov	r1, r4
 8001770:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001774:	4621      	mov	r1, r4
 8001776:	028a      	lsls	r2, r1, #10
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800177e:	2200      	movs	r2, #0
 8001780:	61bb      	str	r3, [r7, #24]
 8001782:	61fa      	str	r2, [r7, #28]
 8001784:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001788:	f7fe fd1e 	bl	80001c8 <__aeabi_uldivmod>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4613      	mov	r3, r2
 8001792:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	0c1b      	lsrs	r3, r3, #16
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	3301      	adds	r3, #1
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80017a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017ae:	e002      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80017b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3750      	adds	r7, #80	; 0x50
 80017bc:	46bd      	mov	sp, r7
 80017be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800
 80017c8:	00f42400 	.word	0x00f42400
 80017cc:	007a1200 	.word	0x007a1200

080017d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e041      	b.n	8001866 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d106      	bne.n	80017fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7fe ffe0 	bl	80007bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2202      	movs	r2, #2
 8001800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3304      	adds	r3, #4
 800180c:	4619      	mov	r1, r3
 800180e:	4610      	mov	r0, r2
 8001810:	f000 f9c0 	bl	8001b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b01      	cmp	r3, #1
 8001882:	d001      	beq.n	8001888 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e04e      	b.n	8001926 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2202      	movs	r2, #2
 800188c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f042 0201 	orr.w	r2, r2, #1
 800189e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a23      	ldr	r2, [pc, #140]	; (8001934 <HAL_TIM_Base_Start_IT+0xc4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d022      	beq.n	80018f0 <HAL_TIM_Base_Start_IT+0x80>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018b2:	d01d      	beq.n	80018f0 <HAL_TIM_Base_Start_IT+0x80>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a1f      	ldr	r2, [pc, #124]	; (8001938 <HAL_TIM_Base_Start_IT+0xc8>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d018      	beq.n	80018f0 <HAL_TIM_Base_Start_IT+0x80>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a1e      	ldr	r2, [pc, #120]	; (800193c <HAL_TIM_Base_Start_IT+0xcc>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d013      	beq.n	80018f0 <HAL_TIM_Base_Start_IT+0x80>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a1c      	ldr	r2, [pc, #112]	; (8001940 <HAL_TIM_Base_Start_IT+0xd0>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d00e      	beq.n	80018f0 <HAL_TIM_Base_Start_IT+0x80>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a1b      	ldr	r2, [pc, #108]	; (8001944 <HAL_TIM_Base_Start_IT+0xd4>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d009      	beq.n	80018f0 <HAL_TIM_Base_Start_IT+0x80>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a19      	ldr	r2, [pc, #100]	; (8001948 <HAL_TIM_Base_Start_IT+0xd8>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d004      	beq.n	80018f0 <HAL_TIM_Base_Start_IT+0x80>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a18      	ldr	r2, [pc, #96]	; (800194c <HAL_TIM_Base_Start_IT+0xdc>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d111      	bne.n	8001914 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2b06      	cmp	r3, #6
 8001900:	d010      	beq.n	8001924 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f042 0201 	orr.w	r2, r2, #1
 8001910:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001912:	e007      	b.n	8001924 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0201 	orr.w	r2, r2, #1
 8001922:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40010000 	.word	0x40010000
 8001938:	40000400 	.word	0x40000400
 800193c:	40000800 	.word	0x40000800
 8001940:	40000c00 	.word	0x40000c00
 8001944:	40010400 	.word	0x40010400
 8001948:	40014000 	.word	0x40014000
 800194c:	40001800 	.word	0x40001800

08001950 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d020      	beq.n	80019b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d01b      	beq.n	80019b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f06f 0202 	mvn.w	r2, #2
 8001984:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 f8dc 	bl	8001b58 <HAL_TIM_IC_CaptureCallback>
 80019a0:	e005      	b.n	80019ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f8ce 	bl	8001b44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f8df 	bl	8001b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d020      	beq.n	8001a00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d01b      	beq.n	8001a00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f06f 0204 	mvn.w	r2, #4
 80019d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2202      	movs	r2, #2
 80019d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f000 f8b6 	bl	8001b58 <HAL_TIM_IC_CaptureCallback>
 80019ec:	e005      	b.n	80019fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 f8a8 	bl	8001b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f8b9 	bl	8001b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d020      	beq.n	8001a4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d01b      	beq.n	8001a4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f06f 0208 	mvn.w	r2, #8
 8001a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2204      	movs	r2, #4
 8001a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f890 	bl	8001b58 <HAL_TIM_IC_CaptureCallback>
 8001a38:	e005      	b.n	8001a46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f882 	bl	8001b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 f893 	bl	8001b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f003 0310 	and.w	r3, r3, #16
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d020      	beq.n	8001a98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f003 0310 	and.w	r3, r3, #16
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d01b      	beq.n	8001a98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f06f 0210 	mvn.w	r2, #16
 8001a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2208      	movs	r2, #8
 8001a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f86a 	bl	8001b58 <HAL_TIM_IC_CaptureCallback>
 8001a84:	e005      	b.n	8001a92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f85c 	bl	8001b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f86d 	bl	8001b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00c      	beq.n	8001abc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d007      	beq.n	8001abc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f06f 0201 	mvn.w	r2, #1
 8001ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f83a 	bl	8001b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00c      	beq.n	8001ae0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d007      	beq.n	8001ae0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f98c 	bl	8001df8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00c      	beq.n	8001b04 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d007      	beq.n	8001b04 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f83e 	bl	8001b80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	f003 0320 	and.w	r3, r3, #32
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00c      	beq.n	8001b28 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f003 0320 	and.w	r3, r3, #32
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d007      	beq.n	8001b28 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f06f 0220 	mvn.w	r2, #32
 8001b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f95e 	bl	8001de4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a46      	ldr	r2, [pc, #280]	; (8001cc0 <TIM_Base_SetConfig+0x12c>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d013      	beq.n	8001bd4 <TIM_Base_SetConfig+0x40>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb2:	d00f      	beq.n	8001bd4 <TIM_Base_SetConfig+0x40>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a43      	ldr	r2, [pc, #268]	; (8001cc4 <TIM_Base_SetConfig+0x130>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d00b      	beq.n	8001bd4 <TIM_Base_SetConfig+0x40>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a42      	ldr	r2, [pc, #264]	; (8001cc8 <TIM_Base_SetConfig+0x134>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d007      	beq.n	8001bd4 <TIM_Base_SetConfig+0x40>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a41      	ldr	r2, [pc, #260]	; (8001ccc <TIM_Base_SetConfig+0x138>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d003      	beq.n	8001bd4 <TIM_Base_SetConfig+0x40>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	4a40      	ldr	r2, [pc, #256]	; (8001cd0 <TIM_Base_SetConfig+0x13c>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d108      	bne.n	8001be6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a35      	ldr	r2, [pc, #212]	; (8001cc0 <TIM_Base_SetConfig+0x12c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d02b      	beq.n	8001c46 <TIM_Base_SetConfig+0xb2>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf4:	d027      	beq.n	8001c46 <TIM_Base_SetConfig+0xb2>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a32      	ldr	r2, [pc, #200]	; (8001cc4 <TIM_Base_SetConfig+0x130>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d023      	beq.n	8001c46 <TIM_Base_SetConfig+0xb2>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a31      	ldr	r2, [pc, #196]	; (8001cc8 <TIM_Base_SetConfig+0x134>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d01f      	beq.n	8001c46 <TIM_Base_SetConfig+0xb2>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a30      	ldr	r2, [pc, #192]	; (8001ccc <TIM_Base_SetConfig+0x138>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d01b      	beq.n	8001c46 <TIM_Base_SetConfig+0xb2>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a2f      	ldr	r2, [pc, #188]	; (8001cd0 <TIM_Base_SetConfig+0x13c>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d017      	beq.n	8001c46 <TIM_Base_SetConfig+0xb2>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a2e      	ldr	r2, [pc, #184]	; (8001cd4 <TIM_Base_SetConfig+0x140>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d013      	beq.n	8001c46 <TIM_Base_SetConfig+0xb2>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a2d      	ldr	r2, [pc, #180]	; (8001cd8 <TIM_Base_SetConfig+0x144>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d00f      	beq.n	8001c46 <TIM_Base_SetConfig+0xb2>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a2c      	ldr	r2, [pc, #176]	; (8001cdc <TIM_Base_SetConfig+0x148>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d00b      	beq.n	8001c46 <TIM_Base_SetConfig+0xb2>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a2b      	ldr	r2, [pc, #172]	; (8001ce0 <TIM_Base_SetConfig+0x14c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d007      	beq.n	8001c46 <TIM_Base_SetConfig+0xb2>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a2a      	ldr	r2, [pc, #168]	; (8001ce4 <TIM_Base_SetConfig+0x150>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d003      	beq.n	8001c46 <TIM_Base_SetConfig+0xb2>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a29      	ldr	r2, [pc, #164]	; (8001ce8 <TIM_Base_SetConfig+0x154>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d108      	bne.n	8001c58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a10      	ldr	r2, [pc, #64]	; (8001cc0 <TIM_Base_SetConfig+0x12c>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d003      	beq.n	8001c8c <TIM_Base_SetConfig+0xf8>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a12      	ldr	r2, [pc, #72]	; (8001cd0 <TIM_Base_SetConfig+0x13c>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d103      	bne.n	8001c94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	691a      	ldr	r2, [r3, #16]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d105      	bne.n	8001cb2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	f023 0201 	bic.w	r2, r3, #1
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	611a      	str	r2, [r3, #16]
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40010000 	.word	0x40010000
 8001cc4:	40000400 	.word	0x40000400
 8001cc8:	40000800 	.word	0x40000800
 8001ccc:	40000c00 	.word	0x40000c00
 8001cd0:	40010400 	.word	0x40010400
 8001cd4:	40014000 	.word	0x40014000
 8001cd8:	40014400 	.word	0x40014400
 8001cdc:	40014800 	.word	0x40014800
 8001ce0:	40001800 	.word	0x40001800
 8001ce4:	40001c00 	.word	0x40001c00
 8001ce8:	40002000 	.word	0x40002000

08001cec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e05a      	b.n	8001dba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a21      	ldr	r2, [pc, #132]	; (8001dc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d022      	beq.n	8001d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d50:	d01d      	beq.n	8001d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a1d      	ldr	r2, [pc, #116]	; (8001dcc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d018      	beq.n	8001d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a1b      	ldr	r2, [pc, #108]	; (8001dd0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d013      	beq.n	8001d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1a      	ldr	r2, [pc, #104]	; (8001dd4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d00e      	beq.n	8001d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d009      	beq.n	8001d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a17      	ldr	r2, [pc, #92]	; (8001ddc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d004      	beq.n	8001d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a15      	ldr	r2, [pc, #84]	; (8001de0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d10c      	bne.n	8001da8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40010000 	.word	0x40010000
 8001dcc:	40000400 	.word	0x40000400
 8001dd0:	40000800 	.word	0x40000800
 8001dd4:	40000c00 	.word	0x40000c00
 8001dd8:	40010400 	.word	0x40010400
 8001ddc:	40014000 	.word	0x40014000
 8001de0:	40001800 	.word	0x40001800

08001de4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <memset>:
 8001e0c:	4402      	add	r2, r0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d100      	bne.n	8001e16 <memset+0xa>
 8001e14:	4770      	bx	lr
 8001e16:	f803 1b01 	strb.w	r1, [r3], #1
 8001e1a:	e7f9      	b.n	8001e10 <memset+0x4>

08001e1c <__libc_init_array>:
 8001e1c:	b570      	push	{r4, r5, r6, lr}
 8001e1e:	4d0d      	ldr	r5, [pc, #52]	; (8001e54 <__libc_init_array+0x38>)
 8001e20:	4c0d      	ldr	r4, [pc, #52]	; (8001e58 <__libc_init_array+0x3c>)
 8001e22:	1b64      	subs	r4, r4, r5
 8001e24:	10a4      	asrs	r4, r4, #2
 8001e26:	2600      	movs	r6, #0
 8001e28:	42a6      	cmp	r6, r4
 8001e2a:	d109      	bne.n	8001e40 <__libc_init_array+0x24>
 8001e2c:	4d0b      	ldr	r5, [pc, #44]	; (8001e5c <__libc_init_array+0x40>)
 8001e2e:	4c0c      	ldr	r4, [pc, #48]	; (8001e60 <__libc_init_array+0x44>)
 8001e30:	f000 f818 	bl	8001e64 <_init>
 8001e34:	1b64      	subs	r4, r4, r5
 8001e36:	10a4      	asrs	r4, r4, #2
 8001e38:	2600      	movs	r6, #0
 8001e3a:	42a6      	cmp	r6, r4
 8001e3c:	d105      	bne.n	8001e4a <__libc_init_array+0x2e>
 8001e3e:	bd70      	pop	{r4, r5, r6, pc}
 8001e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e44:	4798      	blx	r3
 8001e46:	3601      	adds	r6, #1
 8001e48:	e7ee      	b.n	8001e28 <__libc_init_array+0xc>
 8001e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e4e:	4798      	blx	r3
 8001e50:	3601      	adds	r6, #1
 8001e52:	e7f2      	b.n	8001e3a <__libc_init_array+0x1e>
 8001e54:	08001e94 	.word	0x08001e94
 8001e58:	08001e94 	.word	0x08001e94
 8001e5c:	08001e94 	.word	0x08001e94
 8001e60:	08001e98 	.word	0x08001e98

08001e64 <_init>:
 8001e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e66:	bf00      	nop
 8001e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e6a:	bc08      	pop	{r3}
 8001e6c:	469e      	mov	lr, r3
 8001e6e:	4770      	bx	lr

08001e70 <_fini>:
 8001e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e72:	bf00      	nop
 8001e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e76:	bc08      	pop	{r3}
 8001e78:	469e      	mov	lr, r3
 8001e7a:	4770      	bx	lr
